kind: PersistentVolume
apiVersion: v1
metadata:
  name: redis-pv-volume
  labels:
    app: premium
    type: DB
spec:
  storageClassName: manual
  capacity:
    storage: 200M
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: /opt/sfw
    server: 172.31.46.92
    readOnly: false
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    role: master
    tier: backend
  name: redissvc
spec:
  ports:
  - port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  labels:
    app: redis
    role: master
    tier: backend
data:
  master.conf: |- 
    bind 0.0.0.0
    port 6379
    save 900 1
    dir /redis-data
  slave.conf: |-
    bind 0.0.0.0
    port 6379
    dir .
    slaveof redis-premium-master-0.redissvc.default.svc.cluster.local 6379
  sentinel.conf: |- 
    bind 0.0.0.0
    port 26379
    sentinel monitor redis-premium-master redis-premium-master-0.redissvc.default.svc.cluster.local 6379 2
    sentinel parallel-syncs redis-premium-master 1
    sentinel down-after-milliseconds redis-premium-master 10000
    sentinel failover-timeout redis-premium-master 20000
  sentinel.sh: |- 
    #!/bin/bash
    cp /redis-config/sentinel.conf /sentinel.conf
    while ! ping -c 1 redis-premium-master-0.redissvc.default.svc.cluster.local; do
      echo 'Waiting for server'
      sleep 1
    done
    redis-sentinel /sentinel.conf
  init.sh: |-
    #!/bin/bash
    if [[ ${HOSTNAME} == 'redis-premium-master-0' ]]; then
      redis-server /redis-config/master.conf
    else
      redis-server /redis-config/slave.conf
    fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-premium-master
  labels:
    app: redis
    role: master
    tier: backend
spec:
  replicas: 3
  serviceName: redissvc
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend 
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - command: [sh, -c, source /redis-config/init.sh]
        image: redis:3.2.7-alpine
        name: redis
        ports: 
        - containerPort: 6379
        volumeMounts: 
        - mountPath: /redis-data
          name: data
        - mountPath: /redis-config
          name: config    
      - command: [sh, -c, source /redis-config/sentinel.sh]
        image: redis:3.2.7-alpine
        name: sentinel
        ports:
        - containerPort: 26379
        volumeMounts: 
        - mountPath: /redis-data
          name: data
        - mountPath: /redis-config
          name: config          
      volumes: 
      - configMap: 
          defaultMode: 420
          name: redis-config
        name: config
      - name: data
        persistentVolumeClaim:
           claimName: redis-pv-claim
---           
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: premium
    role: business
    type: backend
  name: premiumcalc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: premium
      role: business
      type: backend
  template:
    metadata:
      labels:
        app: premium
        role: business
        type: backend
    spec:
      containers:
      - image: premiumcalc:v1
        name: premiumcalc
        ports:
        - containerPort: 8000
        env: 
        - name: redissvc
          value: redissvc  
